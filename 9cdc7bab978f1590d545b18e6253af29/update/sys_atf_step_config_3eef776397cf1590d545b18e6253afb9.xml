<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step_config">
    <sys_atf_step_config action="INSERT_OR_UPDATE">
        <active>true</active>
        <batch_order_constraint>stop</batch_order_constraint>
        <can_mutate_page>false</can_mutate_page>
        <category display_value="Service Portal">1bd1c141e7020300b2888f49c2f6a9b0</category>
        <class_name/>
        <class_type>script</class_type>
        <deprecated>false</deprecated>
        <description_generator><![CDATA[/* global step */
/* global gs */
/* global GlideRecord */
/* eslint no-undef: "error" */
(function generateDescription(step) {

	if (step.inputs.ui_action) {
		var uiAction = step.inputs.ui_action.getRefRecord();
		if (uiAction.isValidRecord()) {
			var uiActionLabel = uiAction.getDisplayValue();
			var tableLabel = 'any';
		
			if (step.inputs.table) {
				try {
					// if an invalid table is set, the following code will throw an exception
					var anyGr = new GlideRecord(step.inputs.table);
					tableLabel = anyGr.getClassDisplayValue();
				} catch (e) {
					gs.error('Click a UI Action description generation error, invalid Table set');
					tableLabel = '';
				}
			}
			
			if (tableLabel) {
				if (step.inputs.assert_type == 'form_submitted_to_server') {
					return gs.getMessage("Confirm that browser submits '{0}' form to server when clicking UI Action '{1}'",
						[tableLabel, uiActionLabel]
					);
				} else if (step.inputs.assert_type == 'form_submission_canceled_in_browser') {
					return gs.getMessage("Confirm that browser blocks submission of '{0}' form to server when clicking UI Action '{1}'",
						[tableLabel, uiActionLabel]
					);
				} else if (step.inputs.assert_type == 'popup_expected') {
					return gs.getMessage("Confirm that browser blocks submission of '{0}' form to server when clicking UI Action '{1}'",
						[tableLabel, uiActionLabel]
					);
				}

				return gs.getMessage("Click UI Action '{0}' on '{1}' form", [uiActionLabel, tableLabel]);
			}
		} else {
			gs.error("Click a UI Action description generation error, unable to find UI Action by id: '" + step.inputs.ui_action + "'");
		}	
	} else {
		gs.error('Click a UI Action description generation error, no UI Action set');
	}
	
	return gs.getMessage('Error generating the description, please check the error log!');
})(step);]]></description_generator>
        <html_description><![CDATA[<p><br />Clicks a UI Action on the current form.</p>
<h4>Additional Considerations</h4>
<p>In order to use this step you must have already opened a form using either the &#34;Open a Page (SP)&#34; step. After this step, you may or may no longer use any form steps on the currently opened form depending on if it is expected that this step will close it, open a popup or move to a different page.</p>
<p>Outputs the table and sys_id of the record on which the action was clicked.</p>]]></html_description>
        <icon>icon-article-document</icon>
        <inputs/>
        <name>Click a UI Action (SP PXP)</name>
        <order>7299</order>
        <outputs/>
        <step_env display_value="UI">d2cb02e1870312009dccc9ded0e3ec7c</step_env>
        <step_execution_generator><![CDATA[/* global step, stepResult, assertionObject */
/* global g_ui_testing_util, getMessage */
/* eslint no-undef: "error" */
(function(step, stepResult, assertionObject) {	
	// this is mostly ripped from the OOTB Test Step Config 'Click a UI Action (SP)':
	// /nav_to.do?uri=sys_atf_step_config.do?sys_id=86ec986123630300ab65ff5e17bf65a5

	var messages = {
		'FAILED_NO_MODAL': 'FAILURE: Unable find a opened modal',
		'POPUP_WAITING': 'Waiting {0}s for popup',
		'FAILED_NO_G_FORM': 'FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values',
		'ERROR_UNDEFINED_ACTION': 'FAILURE: UI Action not defined by its Step',
		'CLICK_ACTION': "Click UI Action '{0}' on '{1}' form",
		'FAILED_TO_FIND_ACTION': "FAILURE: Failed to find UI Action '{0}' on '{1}' form",
		'SUCCESS_BLOCKED_ACTION': "Successfully confirmed that browser blocks submission of '{0}' form to server when clicking UI Action '{1}'",
		'FAILED_BROWSER_SUBMIT': "FAILURE: Browser failed to submit '{0}' form to server when clicking UI Action '{1}'",
		'DONT_CARE_ACTION': "Successfully clicked UI Action '{0}' on '{1}' form",
		'SUCCESS_SUBMIT': "Successfully confirmed that browser submits '{0}' form to server when clicking UI Action '{1}'",
		'FAILED_SUBMIT': "FAILURE: Failed to submit '{0}' form to server when clicking UI Action '{1}'",
		'WAITING_SUBMIT': 'Waiting for the {0}s for submit',
		'SUBMIT_WAIT_TIMEOUT': 'FAILURE: Wait timed out',
		'SUBMIT_UNEXPECTED': "FAILURE: Submit of '{0}' form to server when clicking UI Action '{1}' was unexpected"
	};
	
    assertionObject.executeStep = function(step, stepResult) {
		getMessage(Object.values(messages), function (translatedMessages) {
			Object.keys(messages).forEach(function (key) {
				messages[key] = translatedMessages[messages[key]];
			});
			
			var $window = g_ui_testing_util.getTestIFrameWindow();
			if ($window.g_form) {
				var table = step.inputs.table;
				var actionSysID = step.inputs.ui_action;

				if (actionSysID) {
					var uiActionElement = $window.document.querySelector("[gsft_id='" + actionSysID + "']");
					if (uiActionElement) {
						var ga = new $window.GlideAjax('ATFUtilClient').setScope('x_376096_pxpval');
						ga.addParam('sysparm_name', 'getUIActionInfo');
						ga.addParam('action_sys_id', actionSysID);
						ga.getXMLAnswer(function (answer) {
							try {
								var result = JSON.parse(answer);
								if (result.status == 'success') {
									assert(uiActionElement, {
										$window: $window,
										$q: g_ui_testing_util.q(),
										$timeout: g_ui_testing_util.timeout(),
										is_pxp_ui_action: result.info.is_pxp_ui_action,
										timeout: step.timeout || 15,
										assert_type: step.inputs.assert_type,
										action_sys_id: actionSysID,
										action_display_value: result.info.display_value
									});
								} else {
									throw new Error(result.message);
								}
							} catch (e) {
								onError(e.message);
							}
						});
					} else {
						onError(messages.FAILED_TO_FIND_ACTION.withValues([actionSysID, table]));
					}
				} else {
					onError(messages.ERROR_UNDEFINED_ACTION);
				}
			} else {
				onError(messages.FAILED_NO_G_FORM);
			}
		});
    };
	
    assertionObject.canMutatePage = step.can_mutate_page;

	function assert(uiActionElement, config) {		
		// there is already a angular cycle in progress - we must call the .click on the ui action when no cycle is in progress!
		// note: $evalAsync didn't work here...
		config.$timeout(function () {
			try {
				var g_form = config.$window.g_form;
				var recordTable = g_form.getTableName();
				var recordSysID = g_form.getSysId(); // note: on the portal, g_form.getUniqueValue() returns -1
				config.record_table = stepResult.outputs.table = recordTable;
				config.record_sys_id = stepResult.outputs.record_id = recordSysID;
				
				message(messages.CLICK_ACTION.withValues([config.action_display_value, recordTable]));

				// when the ui action 
				if (config.is_pxp_ui_action) {
					var pxpUnsubscribe = g_form.$rootScope.$on('x_376096_pxp_form_ui_action_start', function (e, result) {
						try {
							pxpUnsubscribe();

							if (result.status == 'success') {
								if (config.assert_type == 'popup_expected') {
									message(messages.POPUP_WAITING.withValues([config.timeout]));

									// we want to make sure that the form is not going to be submitted
									var submitted = false;
									var submittedUnsubscribe = g_form.$rootScope.$on('sp.form.submitted', function (e, status) {
										submittedUnsubscribe();

										submitted = true;
										onError(messages.SUBMIT_UNEXPECTED.withValues([recordTable, config.action_display_value]));
									});
									
									waitForModal(config).then(function () {
										onSuccess(messages.DONT_CARE_ACTION.withValues([config.action_display_value, recordTable]));
									}, function () {
										onError(messages.FAILED_NO_MODAL);
									})['finally'](function () {
										submittedUnsubscribe();
									});
								} else {
									ootbAssert(config);
								}
							} else {
								throw new Error(result.message);
							}
						} catch (e) {
							onError(messages.FAILED_BROWSER_SUBMIT.withValues([recordTable, config.action_display_value]) + '\nError: ' + e.message);
						}
					});
					
					// using .click here would potentially cause an uncatchable error
					// by using angular's trigger method, we at least get an catchable error an can exit gracefully
					// Note: For PXP UI Actions, we have to first register the 'x_376096_pxp_form_ui_action_start'-listener before clicking the UI Action
					config.$window.angular.element(uiActionElement).trigger('click');
				} else {
					// Note: In the OOTB 'Click a UI Action (SP)' UI Action is clicked before the assert is handled (and we leave it like this)
					config.$window.angular.element(uiActionElement).trigger('click');
					
					ootbAssert(config);
				}
			} catch (e) {
				onError(messages.FAILED_BROWSER_SUBMIT.withValues([recordTable, config.action_display_value]) + '\nError: ' + e.message);
			}
		});
	}
	
	function ootbAssert(config) {
		var g_form = config.$window.g_form;
		var $rootScope = g_form.$rootScope;
		
		g_form.$private.userState.setRunningAction(config.action_sys_id);
		var errors = !g_form.$private.validateForm(config.action_sys_id);

		if (hasValidationScriptState(config.$window)) {
			message(messages.WAITING_SUBMIT.withValues(config.timeout));
			
			var propertyChangeUnsubscribe;
			var submittedUnsubscribe;
			var validatingForm = false;

			propertyChangeUnsubscribe = g_form.$private.events.on('propertyChange', function (type, fieldName, propertyName, propertyValue) {
				if (propertyName == "errorMessage") {
					propertyChangeUnsubscribe();
					submittedUnsubscribe();
					validatingForm = true;

					checkFormValidation(config, true);
				}
			});

			submittedUnsubscribe = $rootScope.$on('sp.form.submitted', function (e, status) {
				propertyChangeUnsubscribe();
				submittedUnsubscribe();
				validatingForm = true;

				config.record_sys_id = status.sys_id;
				checkFormValidation(config, false);
			});
			
			config.$timeout(function () {
				if (validatingForm == false) {
					propertyChangeUnsubscribe();
					submittedUnsubscribe();
					
					onError(messages.SUBMIT_WAIT_TIMEOUT);
				}
			}, config.timeout * 1000);
		} else if (errors) {
			// no validation scripts but error
			checkFormValidation(config, true);
		} else {
			// no validation scripts and no error
			message(messages.WAITING_SUBMIT.withValues([config.timeout]));
			
			var submitted = false;
			var noErrorUnsubscribe = $rootScope.$on('sp.form.submitted', function (e, status) {
				noErrorUnsubscribe();
				submitted = true;

				config.record_sys_id = status.sys_id;
				checkFormValidation(config, false);
			});
			
			config.$timeout(function () {
				if (submitted == false) {
					noErrorUnsubscribe();
					onError(messages.SUBMIT_WAIT_TIMEOUT);
				}
			}, config.timeout * 1000);
		}
	}
	
	function waitForModal(config) {
		var deferred = config.$q.defer();
		
		(function _checkModal(maxTries) {
			
			var modalElement = checkModal(config.$window);
			if (modalElement) {
				deferred.resolve(modalElement);
			} else if (!maxTries) {
				deferred.reject(messages.FAILED_NO_MODAL);
			} else {
				config.$timeout(_checkModal.bind(this, --maxTries), 1000);
			}
			
		})(config.timeout);
		
		return deferred.promise;
	}
	
	function checkModal($window) {
		return $window.document.querySelector('div.modal-dialog > div.modal-content');
	}

	function checkFormValidation(config, errors) {
		if (config.assert_type == 'form_submission_canceled_in_browser') {
			if (errors) {
				onSuccess(messages.SUCCESS_BLOCKED_ACTION.withValues([config.record_table, config.action_display_value]));
			} else {
				onError(messages.FAILED_BROWSER_SUBMIT.withValues([config.record_table, config.action_display_value]));
			}
		} else if (config.assert_type == 'form_submitted_to_server') {
			if (errors) {
				onError(messages.FAILED_BROWSER_SUBMIT.withValues([config.record_table, config.action_display_value]));
			} else {
				var recordExistsGA = new config.$window.GlideAjax('ATFUtilClient').setScope('x_376096_pxpval');
				recordExistsGA.addParam('sysparm_name', 'checkRecordExists');
				recordExistsGA.addParam('record_table', config.record_table);
				recordExistsGA.addParam('record_sys_id', config.record_sys_id);
				recordExistsGA.getXMLAnswer(function (answer) {
					try {
						var result = JSON.parse(answer);
						if (result && result.status == 'success') {
							if (result.record_exists) {
								stepResult.outputs.record_id = config.record_sys_id;
								onSuccess(messages.SUCCESS_SUBMIT.withValues([config.record_table, config.action_display_value]));
							} else {
								onError(messages.FAILED_BROWSER_SUBMIT.withValues([config.record_table, config.action_display_value]));
							}
						} else {
							throw new Error(result.message);
						}
					} catch (e) {
						onError(e.message);
					}
				});
			}
		} else {
			onSuccess(messages.DONT_CARE_ACTION.withValues([config.action_display_value, config.record_table]));
		}
	}
	
	function message(msg) {
		return g_ui_testing_util.setTestStepStatusMessage(msg);
	}
	
	function onError(msg) {
		message(msg);
		stepResult.message = msg;
		stepResult.success = false;
		step.defer.reject();
	}

	function onSuccess(msg) {
		message(msg);
		stepResult.message = msg;
		stepResult.success = true;
		step.defer.resolve();
	}

	function hasValidationScriptState(testFrameWindow) {
		return testFrameWindow.NOW.validationScriptState && Object.keys(testFrameWindow.NOW.validationScriptState).length > 0;
	}
})(step, stepResult, assertionObject);]]></step_execution_generator>
        <sys_class_name>sys_atf_step_config</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-15 10:57:28</sys_created_on>
        <sys_id>3eef776397cf1590d545b18e6253afb9</sys_id>
        <sys_name>Click a UI Action (SP PXP)</sys_name>
        <sys_package display_value="Portal Experience Validation" source="x_376096_pxpval">9cdc7bab978f1590d545b18e6253af29</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Experience Validation">9cdc7bab978f1590d545b18e6253af29</sys_scope>
        <sys_update_name>sys_atf_step_config_3eef776397cf1590d545b18e6253afb9</sys_update_name>
        <template_reminder>Click a UI Action (PXP SP)</template_reminder>
        <type display_value="Test Step" name="sys_atf_step">a76763b375f011108c8b143dd0c59f95</type>
        <wizard_redirect/>
    </sys_atf_step_config>
    <sys_translated_text action="delete_multiple" query="documentkey=3eef776397cf1590d545b18e6253afb9"/>
    <sys_variable_value action="delete_multiple" query="document_key=3eef776397cf1590d545b18e6253afb9"/>
    <sys_element_mapping action="delete_multiple" query="table=var__m_atf_input_variable_3eef776397cf1590d545b18e6253afb9^id=3eef776397cf1590d545b18e6253afb9"/>
    <sys_element_mapping action="delete_multiple" query="table=var__m_atf_output_variable_3eef776397cf1590d545b18e6253afb9^id=3eef776397cf1590d545b18e6253afb9"/>
</record_update>
